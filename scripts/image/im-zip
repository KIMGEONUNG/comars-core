#!/usr/bin/env python

import torch
import torchvision.transforms as transforms
from torchvision.transforms import ToTensor, Compose, Resize, CenterCrop
from torchvision.utils import make_grid
import random
from random import shuffle

import numpy as np
from PIL import Image
import os
from glob import glob
from tqdm import tqdm


def parse():
    import argparse
    parser = argparse.ArgumentParser(description='Image view with grid')
    parser.add_argument('path_dirs', nargs='+', type=str)
    # parser.add_argument('--size', type=int, default=256)
    # parser.add_argument('--ccrop', action='store_true')

    # parser.add_argument('-r', '--num_row', type=int, default=10)
    # parser.add_argument('-c', '--num_col', type=int, default=10)
    # parser.add_argument('--max_iter', type=int, default=100000)
    # parser.add_argument('--pad_value', type=int, default=0)
    # parser.add_argument('--padding', type=int, default=0)
    # parser.add_argument('--postfix', type=str, default='grid')
    return parser.parse_args()


def main():
    args = parse()
    dir_output = '_'.join(args.path_dirs)
    os.makedirs(dir_output, exist_ok=True)
    for i, items in tqdm(
            enumerate(zip(*[sorted(glob(f"{d}/*")) for d in args.path_dirs]))):
        imgs = [Image.open(path).convert('RGB') for path in items]
        x = [np.array(img) for img in imgs]
        x = np.concatenate(x, axis=1)
        img = Image.fromarray(x)
        img.save(os.path.join(dir_output, f'{i:05d}.png'))
if __name__ == '__main__':
    main()
