#!/usr/bin/env python

import sys
import torch
from PIL import Image
import numpy as np
from controlnet_aux import MidasDetector, HEDdetector, NormalBaeDetector, CannyDetector


def parse():
    import argparse
    parser = argparse.ArgumentParser(description='Image to jpg')
    parser.add_argument('--type',
                        '-t',
                        type=str,
                        choices=['hed, canny, depth, normal'],
                        default='hed')

    return parser.parse_args()


def main():
    args = parse()
    target_files = sys.stdin.read().splitlines()
    print("image resize target files: %d EA" % len(target_files), file=sys.stderr)

    model = None
    device = 'cpu'
    if torch.cuda.is_available():
        device = 'cuda'

    if args.type == 'hed':
        model = HEDdetector.from_pretrained("lllyasviel/Annotators").to(device)
    elif args.type == 'canny':
        model = CannyDetector()
        pass
    elif args.type == 'depth':
        model = MidasDetector.from_pretrained("lllyasviel/Annotators").to(device)
    elif args.type == 'normal':
        model = NormalBaeDetector.from_pretrained("lllyasviel/Annotators").to(device)
    else:
        raise NotImplementedError

    for target_file in target_files:
        im = Image.open(target_file)
        im = im.convert('RGB')
        size = im.size
        im = model(im)
        im = im.resize(size)

        parts = target_file.split('.')
        head = ''.join(parts[:-1])
        ext = 'png'
        path_output = f'{head}_{args.type}.{ext}'

        im.save(path_output, quality=100, subsampling=0)
        print(path_output)
