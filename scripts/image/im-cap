#!/usr/bin/env python

import sys
from cv2 import cv2 as cv
from PIL import Image


def parse():
  import argparse
  parser = argparse.ArgumentParser(description='Convert image to gray')
  parser.add_argument('-r',
                      '--replace',
                      default=False,
                      action='store_true',
                      help='replace input')
  parser.add_argument('--caption', required=True, help='postfix name for save')
  parser.add_argument('--postfix',
                      default='_cap',
                      help='postfix name for save')
  parser.add_argument('--position',
                      default='lb',
                      choices=['lb', 'rb', 'lt', 'rt', 'ct', 'cb'],
                      help='caption position')
  parser.add_argument('--scale', default=2, type=int, help='font scale')
  parser.add_argument('--thickness',
                      default=2,
                      type=int,
                      help='font thickness')
  return parser.parse_args()


def main():
  args = parse()

  target_files = sys.stdin.read().splitlines()
  print("image gray target files: %d EA" % len(target_files), file=sys.stderr)

  for target_file in target_files:

    ######################################################################
    im = cv.imread(target_file)
    h, w, _ = im.shape
    buff = 10
    if args.position == 'lb':
      org = (0 + buff, h - buff)
    elif args.position == 'rb':
      raise NotImplementedError()
    elif args.position == 'lt':
      raise NotImplementedError()
    elif args.position == 'rt':
      raise NotImplementedError()
    elif args.position == 'ct':
      raise NotImplementedError()
    elif args.position == 'cb':
      raise NotImplementedError()
    else:
      raise Exception('Invalid position argument')

    fontFace = cv.FONT_HERSHEY_SIMPLEX
    fontscale = args.scale
    color = (0, 0, 0)

    cv.putText(im,
               args.caption,
               org,
               fontFace,
               fontscale,
               color,
               thickness=args.thickness)
    ######################################################################

    path_output = None
    if args.replace:
      path_output = target_file
    else:
      parts = target_file.split('.')
      head = ''.join(parts[:-1])
      ext = '.' + parts[-1]
      path_output = head + args.postfix + ext

    cv.imwrite(path_output, im)
    print(path_output)


if __name__ == '__main__':
  main()
