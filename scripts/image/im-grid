#!/usr/bin/env python

import torch
import os
import sys
import torchvision.transforms as transforms
from torchvision.transforms import ToTensor, Compose, Resize
from torchvision.utils import make_grid
from PIL import Image


def parse():
    import argparse
    parser = argparse.ArgumentParser(description='Image view with grid')
    parser.add_argument('path_dir', type=str)
    parser.add_argument('--size', type=int, default=256)

    parser.add_argument('-n', '--num_row', type=int, default=4)
    parser.add_argument('--pad_value', type=int, default=0)
    parser.add_argument('--padding', type=int, default=2)
    return parser.parse_args()


def main():
    args = parse()
    path_out = args.path_dir + '_grid'

    # Load file
    if not os.path.exists(args.path_dir):
        raise FileNotFoundError(args.path_dir)

    if os.path.exists(path_out):
        raise FileExistsError(path_out)
    os.mkdir(path_out)

    paths = [os.path.join(args.path_dir, p) for p in os.listdir(args.path_dir)] 
    print(paths)
    exit()




    prep = Compose([ToTensor(), Resize((args.size, args.size))])


    targets = [Image.open(target) for target in target_files]
    targets = [prep(target).unsqueeze(0) for target in targets]
    target = torch.cat(targets, dim=0)
    target = make_grid(target, num_row,
            padding=args.padding, pad_value=args.pad_value)

    im = transforms.ToPILImage()(target)
    if args.save is not None:
        im.save(args.save)
    else:
        im.show()


if __name__ == '__main__':
    main()
