#!/usr/bin/env python

from PIL import Image
import numpy as np


def parse():
    import argparse
    parser = argparse.ArgumentParser(description='Image view with grid')
    parser.add_argument('paths', nargs='+', type=str)
    parser.add_argument('--size', nargs='+', type=int, default=None)
    parser.add_argument('-r', '--num_row', type=int, default=1)
    parser.add_argument('-o',
                        '--out',
                        type=str,
                        required=True,
                        help='output path')
    return parser.parse_args()


def main():
    args = parse()

    imgs = [Image.open(path).convert('RGB') for path in args.paths]
    if args.size:
        if len(args.size) == 1:
            size = (args.size, args.size)
        imgs = [img.resize(size) for img in imgs]
    xs = [np.array(img) for img in imgs]

    # PADDING FOR REMAINS
    n_row = args.num_row
    n = len(xs)
    if n % n_row != 0:
        n_col = n // n_row + 1
        n_add = n_col * n_row - n
        xs = xs + [np.zeros_like(xs[0])] * n_add
    else:
        n_col = n // n_row

    # concat
    ls = []
    for i in range(n_row):
        ls.append(np.concatenate(xs[i * n_col:(i + 1) * n_col], axis=1))
    x = np.concatenate(ls, axis=0)
    im: Image = Image.fromarray(x)
    im.save(args.out, quality=100, subsampling=0)


if __name__ == '__main__':
    main()
