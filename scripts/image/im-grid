#!/usr/bin/env python

import torch
import os
import sys
import torchvision.transforms as transforms
from torchvision.transforms import ToTensor, Compose, Resize
from torchvision.utils import make_grid
from PIL import Image
from tqdm import tqdm


def parse():
    import argparse
    parser = argparse.ArgumentParser(description='Image view with grid')
    parser.add_argument('path_dir', type=str)
    parser.add_argument('--size', type=int, default=256)

    parser.add_argument('-n', '--num_row', type=int, default=10)
    parser.add_argument('--pad_value', type=int, default=0)
    parser.add_argument('--padding', type=int, default=2)
    return parser.parse_args()


def rm_last_slash(s: str):
    if s[-1:] == '/':
        s = s[:-1]
    return s


def main():
    args = parse()
    path_out = rm_last_slash(args.path_dir) + '_grid'

    # Load file
    if not os.path.exists(args.path_dir):
        raise FileNotFoundError(args.path_dir)

    if not os.path.exists(path_out):
        os.mkdir(path_out)

    paths = [os.path.join(args.path_dir, p) for p in os.listdir(args.path_dir)] 
    paths.sort()

    num_unit = args.num_row ** 2
    num_iter = len(paths) // num_unit

    prep = Compose([ToTensor(), Resize((args.size, args.size))])
    for i in tqdm(range(num_iter)):
        target_files = paths[i * num_unit:(i + 1) * num_unit]
        targets = [Image.open(target) for target in target_files]
        targets = [prep(target).unsqueeze(0) for target in targets]
        target = torch.cat(targets, dim=0)
        target = make_grid(target, args.num_row,
            padding=args.padding, pad_value=args.pad_value)

        im: Image = transforms.ToPILImage()(target)
        im.save(os.path.join(path_out, '%05d.jpg' % i))


if __name__ == '__main__':
    main()
