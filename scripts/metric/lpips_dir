#!/usr/bin/env python

import lpips
from PIL import Image
from torchvision.transforms import ToTensor, Resize
import argparse
import contextlib
import sys
import os
from os.path import join
from os import listdir


def parse():
    parser = argparse.ArgumentParser(description='Calculate LPIPS')
    parser.add_argument('path', nargs=2)
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--use_resize', action='store_true')
    parser.add_argument('--resize', type=int, default=256)
    parser.add_argument('--net', type=str, default='vgg',
                        choices=['vgg', 'alex'])
    parser.add_argument('--device', default='cuda:0')
    # parser.add_argument('--size_batch', type=int,
    #                     default=100)
    return parser.parse_args()


class DummyFile(object):
    def write(self, x): pass


@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout


def main():
    args = parse()

    num_path = len(args.path)
    if num_path != 2:
        raise Exception('It must have two path')
    path1, path2 = args.path
    names1 = os.listdir(path1)
    names2 = os.listdir(path2)
    names1.sort(), names2.sort()

    if len(names1) != len(names2):
        raise Exception('The number of pair is not same')

    paths1 = [join(path1, name) for name in names1]
    paths2 = [join(path2, name) for name in names2]

    with nostdout():
        loss_fn = lpips.LPIPS(net=args.net).to(args.device)
    print('model loaded', file=sys.stderr)

    prep = None
    if args.use_resize:
        prep = Resize((args.resize, args.resize))

    for p1, p2, in zip(paths1, paths2):

        if args.verbose:
            print(p1, p2)

        im1 = Image.open(p1)
        im2 = Image.open(p2)

        x1 = ToTensor()(im1).unsqueeze(0).mul(2).sub(1).to(args.device)
        x2 = ToTensor()(im2).unsqueeze(0).mul(2).sub(1).to(args.device)
        if prep is not None:
            x1 = prep(x1)
            x2 = prep(x2)

        d = loss_fn(x1, x2).reshape(-1)
        print(d.item())


if __name__ == '__main__':
    main()
