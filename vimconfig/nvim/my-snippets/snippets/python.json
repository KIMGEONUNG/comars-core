{
    "ipil": {
      "prefix": ["ipil"],
      "body": [
        "from PIL import Image"
      ],
      "description": [
        "description"
      ]
    },
    "inp": {
      "prefix": ["inp"],
      "body": [
        "import numpy as np"
      ],
      "description": [
        "description"
      ]
    },
    "ios": {
      "prefix": ["ios"],
      "body": [
        "import os",
        "from os.path import join"
      ],
      "description": [
        "description"
      ]
    },
    "iglob": {
      "prefix": ["iglob"],
      "body": [
        "from glob import glob"
      ],
      "description": [
        "description"
      ]
    },
    "profile": {
        "prefix": [
            "profile"
        ],
        "body": [
            "import time",
            "start = time.time()",
            "...",
            "end = time.time()",
            "print(f\"{end - start:2.10f} sec\")"
        ],
        "description": [
            "description"
        ]
    },
    "flow_vis": {
        "prefix": [
            "flow_vis"
        ],
        "body": [
            "import flow_vis",
            "flows_forward_vis = flow_vis.flow_to_color(",
            "    flows_forward[0].detach().cpu().permute(1, 2, 0).numpy(),",
            "    convert_to_bgr=False)",
            "flows_forward_vis = Image.fromarray(flows_forward_vis)",
            "flows_backward_vis = flow_vis.flow_to_color(",
            "    flows_backward[0].detach().cpu().permute(1, 2, 0).numpy(),",
            "    convert_to_bgr=False)",
            "flows_backward_vis = Image.fromarray(flows_backward_vis)"
        ],
        "description": [
            "description"
        ]
    },
    "raft": {
        "prefix": [
            "raft"
        ],
        "body": [
            "from torchvision.models.optical_flow import Raft_Large_Weights",
            "from torchvision.models.optical_flow import raft_large",
            "device = 'cuda:0'",
            "model = raft_large(weights=Raft_Large_Weights.DEFAULT, progress=False).to(device).eval()",
            "flows_forward = model(x1.to(device), x2.to(device))[-1]",
            "flows_backward = model(x2.to(device), x1.to(device))[-1]",
            "dist = torch.linalg.norm(flows_forward + flows_backward, dim=-3)",
            "confidence = 1 / (1 + dist)"
        ],
        "description": [
            "description"
        ]
    },
    "imagebase": {
        "prefix": [
            "imagebase"
        ],
        "body": [
            "import numpy as np",
            "from PIL import Image",
            "from glob import glob",
            "from tqdm import tqdm",
            "from os.path import join",
            "from os import makedirs"
        ],
        "description": [
            "description"
        ]
    },
    "name": {
        "prefix": [
            "name"
        ],
        "body": [
            "import os",
            "from pathlib import Path",
            "name = Path(os.path.basename(__file__)).stem",
            "path_log = f'logs/{name}'",
            "os.makedirs(path_log, exist_ok=True)"
        ],
        "description": [
            "description"
        ]
    },
    "bpy_import_obj": {
        "prefix": [
            "bpy_import_obj"
        ],
        "body": [
            "bpy.ops.import_scene.obj(filepath=${1:path})"
        ],
        "description": [
            "Import obj file"
        ]
    },
    "ablation": {
        "prefix": [
            "ablation"
        ],
        "body": [
            "from itertools import product",
            "from omegaconf import OmegaConf",
            "from collections import OrderedDict",
            "",
            "",
            "class Ablation():",
            "    def __init__(self, info: OrderedDict):",
            "        self.info = info",
            "        self.length = 1",
            "        self.keys = []",
            "        self.lengths = []",
            "        for key, value in info.items():",
            "            self.keys.append(key)",
            "            self.lengths.append(len(value[\"values\"]))",
            "            self.length *= len(value[\"values\"])",
            "        self.pointers = list(product(*[range(item) for item in self.lengths]))",
            "        self.num_keys = len(self.keys)",
            "        self.cnt = 0",
            "",
            "    def __len__(self):",
            "        return self.length",
            "        pass",
            "",
            "    def __iter__(self):",
            "        return self",
            "",
            "    def __next__(self):",
            "        if self.cnt >= self.length:",
            "            raise StopIteration",
            "",
            "        pointer = self.pointers[self.cnt]",
            "        env = {}",
            "        ids = []",
            "        for i in range(self.num_keys):",
            "            value = self.info[self.keys[i]][\"values\"][pointer[i]]",
            "            format = self.info[self.keys[i]][\"format\"]",
            "            env[self.keys[i]] = value",
            "            ids.append(format % value)",
            "",
            "        id = '-'.join(ids)",
            "        env = OmegaConf.create(env)",
            "",
            "        self.cnt += 1",
            "        return id, env",
            "",
            "",
            "info = OrderedDict({",
            "    \"steps\": {",
            "        \"values\": [",
            "            1,",
            "            2,",
            "            3,",
            "            4,",
            "        ],",
            "        \"format\": \"step:%03d\",",
            "    },",
            "    \"hello\": {",
            "        \"values\": [",
            "            \"a\",",
            "            \"b\",",
            "        ],",
            "        \"format\": \"hello:%s\",",
            "    },",
            "})"
        ],
        "description": [
            "ablation class"
        ]
    },
    "import": {
        "prefix": [
            "i"
        ],
        "body": [
            "import ${1:name}"
        ],
        "description": [
            "import"
        ]
    },
    "arg": {
        "prefix": [
            "arg"
        ],
        "body": [
            "import argparse",
            "",
            "def parse():",
            "    p = argparse.ArgumentParser()",
            "    p.add_argument('--path', default='config.yaml')",
            "    return p.parse_args()",
            "",
            "def main():",
            "    args = parse()"
        ],
        "description": [
            "arguement"
        ]
    },
    "definit": {
        "prefix": "defi",
        "body": "def __init__(self, ${1:arg}):\n\t${2:pass}$0",
        "description": "init method for class"
    },
    "exit": {
        "prefix": [
            "e"
        ],
        "body": [
            "exit()"
        ],
        "description": [
            "exit"
        ]
    },
    "print": {
        "prefix": "p",
        "body": [
            "print(${1:'hello world'})"
        ]
    },
    "shebang": {
        "prefix": "#!",
        "body": [
            "#!/usr/bin/env python"
        ]
    },
    "dash": {
        "prefix": "---",
        "body": [
            "#-kk--------------------------------------------#"
        ]
    }
}
