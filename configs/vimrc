""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                     /\                 .__           "
"   ____  ____   _____ _____ _______  )/   ______  ___  _|__| _____    "
" _/ ___\/  _ \ /     \\__  \\_  __ \     /  ___/  \  \/ /  |/     \   "
" \  \__(  <_> )  Y Y  \/ __ \|  | \/     \___ \    \   /|  |  Y Y  \  "
"  \___  >____/|__|_|  (____  /__|       /____  >    \_/ |__|__|_|  /  "
"      \/            \/     \/                \/                  \/   "
"                                                                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" # VIM AND NVIM SHARE SAME CONFIG ===========================================  
if has('nvim')
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath=&runtimepath
endif


" # BASIC CONFIGS ============================================================ 
set exrc
" set guicursor=
set noerrorbells

let mapleader=" "
set scrolloff=8
set incsearch
set hlsearch
set expandtab
set ts=4
set shiftwidth=4
set autoindent

set relativenumber
set nu

" set hidden
set nowrap
set nobackup
set noswapfile
" set undodir=~/.vim/undodir
" set undofile
set colorcolumn=80


" # FUNCTIONS ================================================================
function! ExecutePredef()
    write
    if filereadable('vim.run.sh')
         !bash vim.run.sh
    endif
endfunction

" File specific fast execution
function! ExecuteFile(arg)
    write
    if !empty(matchstr(a:arg, '.py$'))
        !python % 
    elseif !empty(matchstr(a:arg, '.sh$'))
        !bash % 
    endif
endfunction

" LSP formatting
function! Format(arg)
    if !empty(matchstr(a:arg, '.json$'))
        :lua vim.lsp.buf.range_formatting({},{0,0},{vim.fn.line("$"),0})
    else
        :lua vim.lsp.buf.formatting()
    endif
endfunction


" # KEY MAPS =================================================================
"Don't use register when simple delete
nnoremap x v"_d

nnoremap <Leader>e :call ExecuteFile(expand('%:t'))<CR>
nnoremap <Leader>E :call ExecutePredef()<CR>
nnoremap <Leader>w :w<CR> 
nnoremap <Leader>q :q<CR> 

nnoremap <Leader>gs ^
nnoremap <Leader>ge $

nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bb :bf<CR>
nnoremap <Leader>bd :bd<CR>

nnoremap <Leader>nh :noh<CR>

nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>j :wincmd j<CR>
nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>l :wincmd l<CR>
nnoremap <Leader>x :wincmd x<CR>

nnoremap <Leader>0 :resize +10<CR>
nnoremap <Leader>9 :resize -10<CR>
nnoremap <Leader>= :vertical resize +10<CR>
nnoremap <Leader>- :vertical resize -10<CR>

nnoremap <C-u> 10k 
nnoremap <C-d> 10j 
vnoremap <C-u> 10k 
vnoremap <C-d> 10j 

inoremap <C-q> <ESC>
nnoremap <C-q> <ESC>
vnoremap <C-q> <ESC>
cnoremap <C-q> <ESC>

nnoremap <C-a> ^
nnoremap <C-e> <ESC>$
nnoremap <C-f> W
nnoremap <C-b> B

vnoremap <C-a> ^
vnoremap <C-e> $

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

inoremap <C-@> <C-x><C-o>

inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$
inoremap <C-f> <C-o>W
inoremap <C-b> <C-o>B
inoremap <C-l> <C-o>l

inoremap <C-d> <C-o>diw

" Keeping it centered
nnoremap n nzz
nnoremap N Nzz
nnoremap J mzJ'z

nnoremap Y y$

" Undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Jumplist mutation
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : "") . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : "") . 'j'

" # PLUGINS ==================================================================
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

if has('nvim')
    Plugin 'nvim-lua/popup.nvim'
    Plugin 'nvim-lua/plenary.nvim'
    Plugin 'nvim-telescope/telescope.nvim'
    Plugin 'nvim-telescope/telescope-fzy-native.nvim'
    Plugin 'kyazdani42/nvim-web-devicons'

    Plugin 'iamcco/markdown-preview.nvim'

    Plugin 'neovim/nvim-lspconfig'
    " Plugin 'kabouzeid/nvim-lspinstall'
    Plugin 'nvim-lua/completion-nvim'

    Plugin 'Shougo/neosnippet.vim'
    Plugin 'Shougo/neosnippet-snippets'
else
    " auto complete tool
    Plugin 'ycm-core/YouCompleteMe'
    Plugin 'vim-syntastic/syntastic'

    " find files
    Plugin 'kien/ctrlp.vim'

    " vim snippet sets. two plugin need each other
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
endif

Plugin 'morhetz/gruvbox'
Plugin 'kimgeonung/dracula'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'tpope/vim-surround'

" Maximizes and restores the current window in Vim. 
Plugin 'szw/vim-maximizer'

" vim debugger
Plugin 'puremourning/vimspector'

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" auto formatting collection
Plugin 'Chiel92/vim-autoformat'

" html previwer
Plugin 'turbio/bracey.vim'

" NerdTree
Plugin 'preservim/nerdtree'
Plugin 'ryanoasis/vim-devicons'

" html css javascript auto completion
Plugin 'mattn/emmet-vim'

" vim comment plugin
Plugin 'tomtom/tcomment_vim'

call vundle#end()            " required
filetype plugin indent on    " required

" # AIRLINE===================================================================
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1

" # VIM-AUTOFORMAT============================================================
noremap <F3> :Autoformat<CR>
let g:autoformat_retab = 0

" # NERD-TREE=================================================================
map <C-n> :NERDTreeToggle<CR>
" set guifont=DroidSansMono\ Nerd\ Font\ 11

" # BRACEY====================================================================
" default command: bracey
map <F2> :Bracey<CR>

" # VIMSPECTOR================================================================
fun GoToWindow(id)
    call win_gotoid(a:id)
endfun

let g:vimspector_enable_mappings = 'HUMAN'

nnoremap <leader>dd :w<CR>:call vimspector#Launch()<CR>
nnoremap <leader>dc :call GoToWindow(g:vimspector_session_windows.code)<CR>
nnoremap <leader>dt :call GoToWindow(g:vimspector_session_windows.tagpage)<CR>
nnoremap <leader>dv :call GoToWindow(g:vimspector_session_windows.variables)<CR>
nnoremap <leader>dw :call GoToWindow(g:vimspector_session_windows.watches)<CR>
nnoremap <leader>ds :call GoToWindow(g:vimspector_session_windows.stack_trace)<CR>
nnoremap <leader>do :call GoToWindow(g:vimspector_session_windows.output)<CR>
nnoremap <leader>de :call vimspector#Reset()<CR>

nnoremap <leader>dtcb :call vimspector#CleanLineBreakpoint()<CR>

nmap <leader>dl <Plug>VimspectorStepInto 
nmap <leader>dj <Plug>VimspectorStepOver
nmap <leader>dk <Plug>VimspectorStepOut
nmap <leader>d_ <Plug>VimspectorRestart
nnoremap <leader>d<space> :call vimspector#Continue()<CR> 

nmap <leader>drc <Plug>VimspectorRunToCursor
nmap <leader>dbp <Plug>VimspectorToggleBreakpoint
nmap <leader>dcbp <Plug>VimspectorToggleConditionalBreakpoint

" # SCHEME====================================================================
set termguicolors
let g:gruvbox_contrast_dark = 'dark'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'
colorscheme gruvbox 
set background=dark


" # VIM ONLY OR NVIM ONLY=====================================================
if has('nvim')
    " movement in quickfix reference 
    nnoremap <C-j> :cnext<CR>
    nnoremap <C-k> :cprevious<CR>

    " Find files using Telescope command-line sugar.
    " nnoremap <leader>ff <cmd>Telescope find_files<cr>
    nnoremap <leader>ff :Telescope find_files<cr>
    nnoremap <leader>fg :Telescope live_grep<cr>
    nnoremap <leader>fb :Telescope buffers<cr>
    nnoremap <leader>fh :Telescope help_tags<cr>

    lua require('telescope').setup{
    \defaults = {
        \file_ignore_patterns = {'%.pyc', '.git/*', '__pycache__/*',
            \'%.jpeg', '%.jpg', '%.JPEG', '%.png', '%.gif',
            \'%.pkl'}
        \}
    \}
    
    " # NVIM-LSPCONFIG========================================================
    nnoremap <silent> gD :lua vim.lsp.buf.declaration()<CR>
    nnoremap <silent> gd :lua vim.lsp.buf.definition()<CR>
    nnoremap <silent> gr :lua vim.lsp.buf.references()<CR>
    nnoremap <silent> K :lua vim.lsp.buf.hover()<CR>
    nnoremap <silent> gi :lua vim.lsp.buf.implementation()<CR>
    nnoremap <silent> <c-f> :call Format(expand('%:t'))<CR>
    nnoremap <silent> <leader>rn :lua vim.lsp.buf.rename()<CR>

    lua require'lspconfig'.pyls.setup{on_attach=require'completion'.on_attach}
    lua require'lspconfig'.vimls.setup{on_attach=require'completion'.on_attach}
    lua require'lspconfig'.hls.setup{on_attach=require'completion'.on_attach}
    lua require'lspconfig'.jsonls.setup{cmd={"vscode-json-languageserver", "--stdio"}}
    lua require'lspconfig'.bashls.setup{}

    " nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
    " nnoremap <silent> <space>wa <cmd>lua vim.lsp.buf.add_workspace_folder()<CR>
    " nnoremap <silent> <space>wr <cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>
    " nnoremap <silent> <space>wl <cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>
    " nnoremap <silent> <space>D <cmd>lua vim.lsp.buf.type_definition()<CR>
    " nnoremap <silent> <space>ca <cmd>lua vim.lsp.buf.code_action()<CR>
    " nnoremap <silent> <space>e <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>
    " nnoremap <silent> [d <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
    " nnoremap <silent> ]d <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
    " nnoremap <silent> <space>q <cmd>lua vim.lsp.diagnostic.set_loclist()<CR>
    
    " # COMPLETION-NVIM=======================================================
    set completeopt=menuone,noinsert,noselect
    " let g:completion_enable_snippet = 'UltiSnips'
    let g:completion_enable_auto_popup = 1
    imap <silent> <c-n> <Plug>(completion_trigger)

    " Autocomplete file path
    let g:completion_chain_complete_list = {
            \ 'default' : {
            \   'default': [
            \       {'complete_items': ['lsp', 'snippet']},
            \       {'mode': '<c-p>'},
            \       {'mode': '<c-n>'}],
            \   'comment': [],
            \   'string' : [
            \       {'complete_items': ['path']}]
            \   }}

    " # NEO-SNIPS=============================================================
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif 

else "Only used in vim
    " # YOU_COMPLETE_ME=======================================================
    " vimspector console autocompletion
    let g:ycm_semantic_triggers = {'VimspectorPrompt': [ '.', '->', ':', '<' ]}
    
    " default shortcut(edit mode): <c-n>
    "  The default value is ['<tab>', '<down>']. If so, snippet shortcut key <tab>
    " would not work. So I remap <tab> into <UP>.
    let g:ycm_key_list_select_completion = ['<UP>', '<Down>']
    nnoremap <Leader>gd :YcmCompleter GoTo<CR>
    
    "# SYNTASTIC==============================================================
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 0
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    
    " # CTRLP=================================================================
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
    
    " # ULTI_SNIPS============================================================
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
endif
