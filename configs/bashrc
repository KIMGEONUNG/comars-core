cat<<'EOF'

 ______   ______   ___ __ __   ________   ______    ___   ______    
/_____/\ /_____/\ /__//_//_/\ /_______/\ /_____/\  /__/\ /_____/\    
\:::__\/ \:::_ \ \\::\| \| \ \\::: _  \ \\:::_ \ \ \::\ \\::::_\/_   
 \:\ \  __\:\ \ \ \\:.      \ \\::(_)  \ \\:(_) ) )_\:_\/ \:\/___/\  
  \:\ \/_/\\:\ \ \ \\:.\-/\  \ \\:: __  \ \\: __ `\ \      \_::._\:\ 
   \:\_\ \ \\:\_\ \ \\. \  \  \ \\:.\ \  \ \\ \ `\ \ \       /____\:\
    \_____\/ \_____\/ \__\/ \__\/ \__\/\__\/ \_\/ \_\/       \_____\/
                                                                                                                          

EOF

# stdout for system
neofetch

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# # set a fancy prompt (non-color, unless we know we "want" color)
# case "$TERM" in
#     xterm-color|*-256color) color_prompt=yes;;
# esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

# if [ -n "$force_color_prompt" ]; then
#     if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# 	# We have color support; assume it's compliant with Ecma-48
# 	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# 	# a case would tend to support setf rather than setaf.)
# 	color_prompt=yes
#     else
# 	color_prompt=
#     fi
# fi

# if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# else
#     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# fi
# unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias df='df -h'

cdn () {
    name=$(ls | sort | line $1)
    cd $name 
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# custom 
alias xsel='xsel -ib'
alias cdcomar='cd ~/repos/comars-core/'

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/comar/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/comar/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/comar/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/comar/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="/home/comar/bin:$PATH"


# Color definition (with printf) 
## TC is terminal color
## Example
## printf "I ${RED}love${NC} Stack Overflow\n" 
## echo -e "I ${RED}love${NC} Stack Overflow" 
export TC_BLACK='\033[0;30m'
export TC_BLACK_BOLD='\033[1;30m'
export TC_BLACK_ITALIC='\033[3;30m'
export TC_BLACK_UNDERLINE='\033[4;30m'
export TC_BLACK_MISTAKE='\033[9;30m'
export TC_RED='\033[0;31m'
export TC_RED_BOLD='\033[1;31m'
export TC_RED_ITALIC='\033[3;31m'
export TC_RED_UNDERLINE='\033[4;31m'
export TC_RED_MISTAKE='\033[9;31m'
export TC_GREEN='\033[0;32m'
export TC_GREEN_BOLD='\033[1;32m'
export TC_GREEN_ITALIC='\033[3;32m'
export TC_GREEN_UNDERLINE='\033[4;32m'
export TC_GREEN_MISTAKE='\033[9;32m'
export TC_BROWN_ORANGE='\033[0;33m'
export TC_BROWN_ORANGE_BOLD='\033[1;33m'
export TC_BROWN_ORANGE_ITALIC='\033[3;33m'
export TC_BROWN_ORANGE_UNDERLINE='\033[4;33m'
export TC_BROWN_ORANGE_MISTAKE='\033[9;33m'
export TC_BLUE='\033[0;34m'
export TC_BLUE_BOLD='\033[1;34m'
export TC_BLUE_ITALIC='\033[3;34m'
export TC_BLUE_UNDERLINE='\033[4;34m'
export TC_BLUE_MISTAKE='\033[9;34m'
export TC_PURPLE='\033[0;35m'
export TC_PURPLE_BOLD='\033[1;35m'
export TC_PURPLE_ITALIC='\033[3;35m'
export TC_PURPLE_UNDERLINE='\033[4;35m'
export TC_PURPLE_MISTAKE='\033[9;35m'
export TC_CYAN='\033[0;36m'
export TC_CYAN_BOLD='\033[1;36m'
export TC_CYAN_ITALIC='\033[3;36m'
export TC_CYAN_UNDERLINE='\033[4;36m'
export TC_CYAN_MISTAKE='\033[9;36m'
export TC_LIGHTGRAY='\033[0;37m'
export TC_LIGHTGRAY_BOLD='\033[1;37m'
export TC_LIGHTGRAY_ITALIC='\033[3;37m'
export TC_LIGHTGRAY_UNDERLINE='\033[4;37m'
export TC_LIGHTGRAY_MISTAKE='\033[9;37m'
export TC_NC='\033[0m' # No Color
export TC_NC_BOLD='\033[1m'
export TC_NC_ITALIC='\033[3m'
export TC_NC_UNDERLINE='\033[4m'
export TC_NC_MISTAKE='\033[9m'

function color_my_prompt {
    local __user_and_host="${TC_CYAN_BOLD}\u@\h"
    local __cur_location="${TC_LIGHTCYAN}\w"
    local __git_branch_color="${TC_RED}"
    local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`\n'
    local __prompt_tail="${TC_PURPLE}$"
    local __last_color="${TC_NC}"
    export PS1="$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}
color_my_prompt

export VISUAL="/usr/bin/vim"
export EDITOR="$VISUAL"
export CUDA_HOME="/usr/local/cuda-11.3"
export PATH=$PATH:$CUDA_HOME/bin

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    # echo 'ssh access'
    export PS1="${TC_RED_ITALIC}<ssh access> $PS1"
fi


if [ $(cat /etc/hostname) == 'comar-laptop' ]; then
    # Key mapping
    # xmodmap : change keymap
    # xev : check keymap
    # xmodmap -e 'keycode  66 = Control_L NoSymbol Control_L'
    # xmodmap -e 'keycode 37 = ' # control_l
    # xmodmap -e 'keycode 36 = ' # Enter
    xmodmap -e 'keycode 64 = Control_L' # Alt_L 
fi
